# Copyright (c) 2023 Uber Technologies, Inc.
# 
# <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy of the License at
# <p>http://www.apache.org/licenses/LICENSE-2.0
# 
# <p>Unless required by applicable law or agreed to in writing, software distributed under the
# License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing permissions and
# limitations under the License.

#
# Before 
#   true && abcd()
# After 
#   abcd()
#
[[rules]]
name = "true_and_something"
query = """(
(conjunction_expression
        lhs: [(boolean_literal) @true  
            (tuple_expression 
                value: (boolean_literal) @true)]
        rhs: (_) @rhs
    ) @conjunction_expression
(#eq? @true "true")
)"""
groups = ["boolean_expression_simplify"]
replace_node = "conjunction_expression"
replace = "@rhs"
is_seed_rule = false

#
# Before 
#   abcd() && true
# After 
#   abcd()
#
[[rules]]
name = "something_and_true"
query = """(
(conjunction_expression
        lhs: (_) @lhs
        rhs: [(boolean_literal) @true  
            (tuple_expression 
                value: (boolean_literal) @true)]
    ) @conjunction_expression
(#eq? @true "true")
)"""
groups = ["boolean_expression_simplify"]
replace_node = "conjunction_expression"
replace = "@lhs"
is_seed_rule = false

#
# Before 
#   true || abcd()
# After 
#   true
#
[[rules]]
name = "true_or_something"
query = """(
(disjunction_expression
        lhs: [(boolean_literal) @true  
            (tuple_expression 
                value: (boolean_literal) @true)]
        rhs: (_) 
    ) @disjunction_expression
(#eq? @true "true")
)"""
groups = ["boolean_expression_simplify"]
replace_node = "disjunction_expression"
replace = "true"
is_seed_rule = false

#
#   false || abcd()
# After 
#   abcd()
#
[[rules]]
name = "false_or_something"
query = """(
(disjunction_expression
        lhs: [(boolean_literal) @false  
            (tuple_expression 
                value: (boolean_literal) @false)]
        rhs: (_) @rhs
    ) @disjunction_expression
(#eq? @false "false")
)"""
groups = ["boolean_expression_simplify"]
replace_node = "disjunction_expression"
replace = "@rhs"
is_seed_rule = false

#
# Before 
#   abcd || true
# After 
#   true
#
[[rules]]
name = "some_identifier_or_true"
query = """(
(disjunction_expression
        lhs: (simple_identifier)
        rhs: [(boolean_literal) @true  
            (tuple_expression 
                value: (boolean_literal) @true)]
    ) @disjunction_expression
(#eq? @true "true")
)"""
groups = ["boolean_expression_simplify"]
replace_node = "disjunction_expression"
replace = "true"
is_seed_rule = false

#
# Before
#   abcd() || false
# After 
#   abcd()
#
[[rules]]
name = "something_or_false"
query = """(
(disjunction_expression
        lhs: (_) @lhs
        rhs: [(boolean_literal) @false  
            (tuple_expression 
                value: (boolean_literal) @false)]
    ) @disjunction_expression
(#eq? @false "false")
)"""
groups = ["boolean_expression_simplify"]
replace_node = "disjunction_expression"
replace = "@lhs"
is_seed_rule = false

#
# Before 
#   false && abcd()
# After 
#   false
#
[[rules]]
name = "false_and_something"
query = """(
(conjunction_expression
        lhs: [(boolean_literal) @false  
            (tuple_expression 
                value: (boolean_literal) @false)]
        rhs: (_) 
    ) @conjunction_expression
(#eq? @false "false")
)"""
groups = ["boolean_expression_simplify"]
replace_node = "conjunction_expression"
replace = "false"
is_seed_rule = false

#
# Before 
#   !true
# After 
#   false
#
[[rules]]
name = "not_true"
query = """(
(prefix_expression
        operation: (bang)
        target: [(boolean_literal) @true
            (tuple_expression
                value: (boolean_literal) @true)]
        ) @not_expression
(#eq? @true "true")
)"""
groups = ["boolean_expression_simplify"]
replace_node = "not_expression"
replace = "false"
is_seed_rule = false

#
# Before 
#   abcd && false
# After 
#   false
#
# Note that this rule only applies when the lhs of the conjunction is an identifier. 
# In other scenarios (i.e. is a method invocation or some other expression) we would not simplify at all, as:
# such expressions could have side effects
[[rules]]
name = "some_identifier_and_false"
query = """(
(conjunction_expression
        lhs: (simple_identifier) 
        rhs: [(boolean_literal) @false  
            (tuple_expression 
                value: (boolean_literal) @false)]
    ) @conjunction_expression
(#eq? @false "false")
)"""
groups = ["boolean_expression_simplify"]
replace_node = "conjunction_expression"
replace = "false"
is_seed_rule = false

#
# Before
#   !false
# After
#   true
#
[[rules]]
name = "not_false"
query = """(
(prefix_expression
        operation: (bang)
        target: [(boolean_literal) @false
            (tuple_expression
                value: (boolean_literal) @false)]
    ) @not_expression
(#eq? @false "false")
)"""
groups = ["boolean_expression_simplify"]
replace_node = "not_expression"
replace = "true"
is_seed_rule = false

#
# Next two rules take care of if-else cleanup, these 2 rules depend on their order in this file
# 

#
# Before 
#   if true {
#     abcd()
#   } else {
#     hij()
#   }
# After 
#   abcd()
#
[[rules]]
name = "if_always_true"
query = """ (
(if_statement
    condition: (boolean_literal) @condition_literal
    ((comment)*
    .(statements)) @if_block
    ) @if_else_block
(#eq? @condition_literal "true")
)"""
groups = ["if_cleanup"]
replace_node = "if_else_block"
replace = "@if_block"
is_seed_rule = false

#
# Before 
#   else if true {
#     abcd()
#   } else {
#     hij()
#   }
# After 
#   abcd()
#
[[rules]]
name = "else_if_always_true"
query = """ (
(else)
(if_statement
    condition: (boolean_literal) @condition_literal
    ((comment)*
    .(statements)) @if_block
    ) @if_else_block
(#eq? @condition_literal "true")
)"""
groups = ["if_cleanup"]
replace_node = "if_else_block"
replace = "{ @if_block }"
is_seed_rule = false

# Order of next 3 rules should not be changed as, we depend on order to clean if always false cases.
# Before 
#   if false {
#     abcd()
#   } 
#   hij()
# After 
#   hij()
# 
[[rules]]
name = "if_always_false"
query = """(  
(if_statement
    bound_identifier: (_)?
    condition: (boolean_literal) @condition_literal
    ((comment)*
    .(statements)) @if_block
    ((comment)*
    [(statements)
     (if_statement)])? @alternatives 
    ) @if_else_block
(#eq? @condition_literal "false")
)"""
groups = ["if_cleanup"]
replace_node = "if_else_block"
replace = "@alternatives"
is_seed_rule = false


# Before 
#   if v1 {
#       f1()
#   } else if false {
#       f2()
#   } else {
#       f3()
#   }
#   f4()
# After 
#   if v1 {
#       f1()
#   } else {
#       f3()
#   }
#   f4()
[[rules]]
name = "else_if_always_false_followed_by_else"
query = """(  
(else)
(if_statement
    bound_identifier: (_)?
    condition: (boolean_literal) @condition_literal
    (comment)*
    .(statements) @if_block
    ((comment)*
    (statements)?) @alternatives 
    ) @if_else_block
(#eq? @condition_literal "false")
)"""
groups = ["if_cleanup"]
replace_node = "if_else_block"
replace = """{ 
    @alternatives
    }"""
is_seed_rule = false


# Before 
#   if v1 {
#       f1()
#   } else if false {
#       f2()
#   } else if v2{
#       f3()
#   } else {
#       f4()
#   }
#   f5()
# After 
#   if v1 {
#       f1()
#   } else if v2 {
#       f3()
#   } else {
#       f4()
#   }
#   f5()
[[rules]]
name = "else_if_always_false_followed_by_else_if"
query = """(  
(else)
(if_statement
    bound_identifier: (_)?
    condition: (boolean_literal) @condition_literal
    (comment)*
    .(statements) @if_block
    (if_statement) @alternatives 
    ) @if_else_block
(#eq? @condition_literal "false")
)"""
groups = ["if_cleanup"]
replace_node = "if_else_block"
replace = "@alternatives"
is_seed_rule = false


# Before:
# if true, anything { }
# if anything, true { }
# After: 
# if anything { }
# anything: [ variable, function_call, variable_assignment (to a function's return value, optional variable),
# equality check (with a function's return value, variable ]
[[rules]]
name = "if_let_true_cleanup_literal_checks"
query = """(
    [
        (if_statement
            condition: (boolean_literal) @boollc
            bound_identifier: (simple_identifier)
            (statements)
        )
        (if_statement
            bound_identifier: (simple_identifier)
            condition: (boolean_literal) @boollc
            (statements)
        )
        (if_statement
            condition: (boolean_literal) @boollc
            condition: (equality_expression) @exprec
            (statements)
        )
        (if_statement
            condition: (equality_expression) @exprec
            condition: (boolean_literal) @boollc
            (statements) 
        )
        (if_statement
            condition: (boolean_literal) @boollc
            condition: [
                (call_expression) 
                (simple_identifier)
            ]
            (statements) 
        )
        (if_statement
            condition: [
                (call_expression)
                (simple_identifier)
            ]
            condition: (boolean_literal) @boollc
            (statements) 
        )
    ] @ifstl
    (#eq? @boollc "true")
)"""
replace_node = "boollc"
replace = ""
groups = ["boolean_expression_simplify"]
is_seed_rule = false

#
# Before
#   guard true else {
#       return f1()
#   }
#   f2()
# After 
#   f2()
#
[[rules]]
name = "guard_always_true"
query = """(
(guard_statement
    condition: [(boolean_literal) @true  
            (tuple_expression 
                value: (boolean_literal) @true)]
    ) @guard_block
(#eq? @true "true")
)"""
groups = ["guard_cleanup"]
replace_node = "guard_block"
replace = ""
is_seed_rule = false

#
# Before
# var v = true ? x : y
#
# After
# var v = x
#
[[rules]]
name = "ternary_true"
query = """(
(ternary_expression
    condition:[(boolean_literal) @true  
            (tuple_expression 
                value: (boolean_literal) @true)]
    if_true:(_) @block_true
    ) @ternary_block
(#eq? @true "true")
)"""
groups = ["if_cleanup"]
replace_node = "ternary_block"
replace = "@block_true"
is_seed_rule = false

#
# Before
#   guard false else {
#       return f1()
#   }
#   f2()
# After 
#   return f1()
#   f2()
#
[[rules]]
name = "guard_always_false"
query = """(
(guard_statement
    condition: [(boolean_literal) @false  
            (tuple_expression 
                value: (boolean_literal) @false)]
    (statements) @else_block
    ) @guard_block
(#eq? @false "false")
)"""
groups = ["guard_cleanup"]
replace_node = "guard_block"
replace = "@else_block"
is_seed_rule = false

#
# var v = false ? x : y
#
# After
# var v = y
#
[[rules]]
name = "ternary_false"
query = """(
(ternary_expression
    condition:[(boolean_literal) @false  
            (tuple_expression 
                value: (boolean_literal) @false)]
    if_false:(_) @block_false
    ) @ternary_block
(#eq? @false "false")
)"""
groups = ["if_cleanup"]
replace_node = "ternary_block"
replace = "@block_false"
is_seed_rule = false

# delete variables declared in a function scope
[[rules]]
name = "delete_variable_declaration"
query = """(
                (property_declaration
                    name: (pattern
                        bound_identifier: (simple_identifier) @hvariable
                    )
                    value: (boolean_literal) @hvalue
                ) @property_declaration
)"""
replace_node = "property_declaration"
replace = ""
is_seed_rule = false

[[rules.filters]]
enclosing_node = "(function_declaration) @cfd"

# skip the rule if the variable is assigned with some other value in the class scope
[[rules.filters]]
enclosing_node = "(class_declaration) @cd"
not_contains = ["""(
        (parameter
            name: (simple_identifier) @c1var
        )
        (#eq? @c1var "@hvariable")
    )""", """(
    (assignment
        target: (directly_assignable_expression
            [ (navigation_expression
                target: (self_expression)
                suffix: (navigation_suffix
                    suffix: (simple_identifier) @var
                )
                )
                (simple_identifier) @var
            ]
            )
        result: (boolean_literal) @val
    )
    (#eq? @var "@hvariable")
    (#not-eq? @val "@hvalue")
)"""]

# rule to delete assignments like a = true subject to the mentioned filters
[[rules]]
name = "delete_parent_assignment"
query = """(
    (assignment
        target: (directly_assignable_expression
            [ (navigation_expression
                target: (self_expression)
                suffix: (navigation_suffix
                    suffix: (simple_identifier) @avariable
                )
                )
                (simple_identifier) @avariable
            ]
            )
        result: (boolean_literal) @avalue
    ) @assignment
    (#eq? @avariable "@hvariable")
)"""
replace_node = "assignment"
replace = ""
holes = ["hvariable", "hvalue"]
is_seed_rule = false

[[rules.filters]]
enclosing_node = "(class_declaration) @cd"
not_contains = [
  # skip the rule if the variable is declared with a different value in the class scope
  """(
        (property_declaration
            name: (pattern
                bound_identifier: (simple_identifier) @var
            )
            value: (boolean_literal) @val
        )@property_declaration
        (#eq? @var "@avariable")
        (#not-eq? @val "@avalue")
    )""",

  # skip the rule if the variable is being assigned a different value in the class scope
  """(
        (assignment
            target: (directly_assignable_expression
                [   (navigation_expression
                        target: (self_expression)
                        suffix: (navigation_suffix
                            suffix: (simple_identifier) @var
                        )
                    )
                    (simple_identifier) @var
                ]
            )
            result: (boolean_literal) @val
        )
        (#eq? @var "@avariable")
        (#not-eq? @val "@avalue")
    )""",

  # skip the rule if the variable is a parameter of a function
  """(
        (parameter
            name: (simple_identifier) @c1var
        )
        (#eq? @c1var "@avariable")
    )""",
]

# rule to replace the identifier with the value with the mentioned filters
[[rules]]
name = "replace_identifier_with_value"
query = """(
    (simple_identifier) @identifier
    (#eq? @identifier "@hvariable")
)"""
replace_node = "identifier"
replace = "@hvalue"
holes = ["hvariable", "hvalue"]
is_seed_rule = false

[[rules.filters]]
enclosing_node = "(class_declaration) @cd"
not_contains = [
  # skip the rule if the variable is one of the parameters of some function
  """(
        (parameter
            name: (simple_identifier) @c1var
        )
        (#eq? @c1var "@identifier")
    )""",
  # skip the rule if there is a declaration of the same variable
  """(
        (property_declaration
            name: (pattern
                bound_identifier: (simple_identifier) @variable
            )
            value: (boolean_literal) @value
        )
        (#eq? @variable "@identifier")
    )""",

  # skip the rule if it is accessed in the self.x manner
  """(
        (navigation_expression
            target: (self_expression)
            suffix: (navigation_suffix
                suffix: (simple_identifier) @variable
            )
        )
        (#eq? @variable "@identifier")
    )""",
]

# rule to delete declaration of variable in class scope
[[rules]]
name = "delete_field_declaration"
query = """(
            (property_declaration
                name: (pattern
                    bound_identifier: (simple_identifier) @avariable
                )
            ) @property_declaration
    (#eq? @avariable "@hvariable")
)"""
replace_node = "property_declaration"
replace = ""
holes = ["hvariable"]
is_seed_rule = false

[[rules.filters]]
enclosing_node = "(class_declaration) @ccd"

# rule to replace field variable used as self.x subject to the mentioned filters
[[rules]]
name = "replace_self_identifier_with_value"
query = """(
    (navigation_expression
        target: (self_expression)
        suffix: (navigation_suffix
            suffix: (simple_identifier) @identifier
        )
    ) @rep
    (#eq? @identifier "@hvariable")
)"""
replace_node = "rep"
replace = "@hvalue"
holes = ["hvariable", "hvalue"]
is_seed_rule = false

[[rules.filters]]
enclosing_node = "(class_declaration) @cd"
not_contains = [
  # skip the rule if the variable is one of the parameters of some function
  """(
        (parameter
            name: (simple_identifier) @c1var
        )
        (#eq? @c1var "@identifier")
    )""",
  # skip the rule if the variable declaration exists
  """(
        (property_declaration
            name: (pattern
                bound_identifier: (simple_identifier) @variable
            )
            value: (boolean_literal) @value
        )
        (#eq? @variable "@identifier")
    )""",
  # skip the rule if the variable is assigned a different value in the class scope
  """( 
        (assignment
            target: (directly_assignable_expression
                [   (navigation_expression
                        target: (self_expression)
                        suffix: (navigation_suffix
                            suffix: (simple_identifier) @var
                        )
                    )
                    (simple_identifier) @var
                ]
            )
            result: (boolean_literal) @val
        )
        (#eq? @var "@hvariable")
        (#not-eq? @val "@hvalue")
    )""",
]

# rule to delete field initialisation: var a = true in class scope
[[rules]]
name = "delete_field_initialisation"
query = """(
            (property_declaration
                name: (pattern
                    bound_identifier: (simple_identifier) @hvariable
                )
                value: (boolean_literal) @hvalue
            ) @property_declaration
)"""
replace_node = "property_declaration"
replace = ""
is_seed_rule = false

[[rules.filters]]
enclosing_node = "[(class_declaration) (init_declaration)] @cd"
not_contains = [
  # skip the rule if the variable is one of the parameters of some function
  """(
        (parameter
            name: (simple_identifier) @c1var
        )
        (#eq? @c1var "@hvariable")
    )""",
  # skip the rule if variable is assigned a different value than the initial in some method
  """(
        (assignment
            target: (directly_assignable_expression
                [ (navigation_expression
                    target: (self_expression)
                    suffix: (navigation_suffix
                        suffix: (simple_identifier) @var
                    )
                    )
                    (simple_identifier) @var
                ]
            )
            result: (boolean_literal) @val
        )
        (#eq? @var "@hvariable")
        (#not-eq? @val "@hvalue")
    )""",
]

# rule to delete field declared in a class and initialized in the init, subject to the mentioned filters
[[rules]]
name = "delete_field_initialisation_init"
query = """(
            (assignment
                target: (directly_assignable_expression
                    [ (navigation_expression
                        target: (self_expression)
                        suffix: (navigation_suffix
                            suffix: (simple_identifier) @hvariable
                        )
                        )
                        (simple_identifier) @hvariable
                    ]
                    )
                result: (boolean_literal) @hvalue
            ) @assignment
)"""
replace_node = "assignment"
replace = ""
is_seed_rule = false

[[rules.filters]]
enclosing_node = "(init_declaration) @cid"


[[rules.filters]]
enclosing_node = "(class_declaration) @cd"
not_contains = [
  # skip the rule if the variable is one of the parameters of some function
  """(
        (parameter
            name: (simple_identifier) @c1var
        )
        (#eq? @c1var "@hvariable")
    )""",
  # skip the rule if the target field is assigned somewhere with a different value
  """( 
        (assignment
            target: (directly_assignable_expression
                [   (navigation_expression
                        target: (self_expression)
                        suffix: (navigation_suffix
                            suffix: (simple_identifier) @var
                        )
                    )
                    (simple_identifier) @var
                ]
            )
            result: (boolean_literal) @val
        )
        (#eq? @var "@hvariable")
        (#not-eq? @val "@hvalue")
    )""",
  # skip the rule if the target variable is declared with some other value
  """(
        (property_declaration
            name: (pattern
                bound_identifier: (simple_identifier) @var
            )
            value: (boolean_literal) @val
        )@property_declaration
        (#eq? @var "@hvariable")
        (#not-eq? @val "@hvalue")
    )""",
]

[[rules]]
name = "de_parenthesize_literals"
query = """(
    (tuple_expression
        [
            (integer_literal)
            (hex_literal)
            (oct_literal)
            (bin_literal)
            (real_literal)
            (boolean_literal)
            (line_string_literal)
            (regex_literal)
        ] @tvalue
    ) @texp
)"""
groups = ["boolean_expression_simplify"]
replace_node = "texp"
replace = "@tvalue"
is_seed_rule = false
#
# Before 
# equality expression with same lhs and rhs for following:
# integer_literal
# hex_literal
# oct_literal
# bin_literal
# real_literal
# boolean_literal
# _string_literal
# regex_literal
# After 
#   true
#
[[rules]]
name = "boolean_equality_expression_same_literals"
query = """(
    (equality_expression
            lhs: [
                (integer_literal)
                (hex_literal)
                (oct_literal)
                (bin_literal)
                (real_literal)
                (boolean_literal)
                (line_string_literal)
                (regex_literal)
            ] @left
            rhs: [
                (integer_literal)
                (hex_literal)
                (oct_literal)
                (bin_literal)
                (real_literal)
                (boolean_literal)
                (line_string_literal)
                (regex_literal)
            ] @right
    ) @cond
    (#eq? @left @right)
)"""
groups = ["boolean_expression_simplify"]
replace_node = "cond"
replace = "true"
is_seed_rule = false

#
# Before 
# equality expression with different lhs and rhs for following:
# integer_literal
# hex_literal
# oct_literal
# bin_literal
# real_literal
# boolean_literal
# _string_literal
# regex_literal
# After 
#   false
#
[[rules]]
name = "boolean_equality_expression_opposite_literals"
query = """(
    (equality_expression
            lhs: [
                (integer_literal)
                (hex_literal)
                (oct_literal)
                (bin_literal)
                (real_literal)
                (boolean_literal)
                (line_string_literal)
                (regex_literal)
            ] @left
            rhs: [
                (integer_literal)
                (hex_literal)
                (oct_literal)
                (bin_literal)
                (real_literal)
                (boolean_literal)
                (line_string_literal)
                (regex_literal)
            ] @right
    ) @cond
    (#not-eq? @left @right)
)"""
groups = ["boolean_expression_simplify"]
replace_node = "cond"
replace = "false"
is_seed_rule = false

#
# Before 
# inequality expression (infix expression with custom_operator = '!='') with same lhs and rhs for following:
# integer_literal
# hex_literal
# oct_literal
# bin_literal
# real_literal
# boolean_literal
# _string_literal
# regex_literal
# After 
#   false
#
[[rules]]
name = "boolean_inequality_expression_same_literals"
query = """(
    (infix_expression
            lhs: [
                (integer_literal)
                (hex_literal)
                (oct_literal)
                (bin_literal)
                (real_literal)
                (boolean_literal)
                (line_string_literal)
                (regex_literal)
            ] @left
            op: (custom_operator) @ops
            rhs: [
                (integer_literal)
                (hex_literal)
                (oct_literal)
                (bin_literal)
                (real_literal)
                (boolean_literal)
                (line_string_literal)
                (regex_literal)
            ] @right
    ) @cond
    (#eq? @ops "!=")
    (#eq? @left @right)
)"""
groups = ["boolean_expression_simplify"]
replace_node = "cond"
replace = "false"
is_seed_rule = false

#
# Before 
# inequality expression (infix expression with custom_operator = '!='') with different lhs and rhs for following:
# integer_literal
# hex_literal
# oct_literal
# bin_literal
# real_literal
# boolean_literal
# _string_literal
# regex_literal
# After 
#   true
#
[[rules]]
name = "boolean_inequality_expression_opposite_literals"
query = """(
    (infix_expression
            lhs: [
                (integer_literal)
                (hex_literal)
                (oct_literal)
                (bin_literal)
                (real_literal)
                (boolean_literal)
                (line_string_literal)
                (regex_literal)
            ] @left
            op: (custom_operator) @ops
            rhs: [
                (integer_literal)
                (hex_literal)
                (oct_literal)
                (bin_literal)
                (real_literal)
                (boolean_literal)
                (line_string_literal)
                (regex_literal)
            ] @right
    ) @cond
    (#eq? @ops "!=")
    (#not-eq? @left @right)
)"""
groups = ["boolean_expression_simplify"]
replace_node = "cond"
replace = "true"
is_seed_rule = false

# rule to delete unreachable code after return statement
[[rules]]
name = "delete_all_statements_after_return"
query = """(
    (  
        (statements)* @st
        (control_transfer_statement) @cts
        (_)+ @extras
    )
)"""
groups = ["if_cleanup"]
replace_node = "extras"
replace = ""
is_seed_rule = false

# Dummy rule that acts as a junction for all boolean based cleanups
# Let's say you want to define rules from A -> B, A -> C, D -> B, D -> C, ... 
# A pattern here is - if there is an outgoing edge to B there is another to C.
# In these cases, you can use a dummy rule X as shown below:
# X -> B, X - C, A -> X, D -> X, ...
[[rules]]
name = "boolean_literal_cleanup"
is_seed_rule = false

[[rules]]
name = "statement_cleanup"
is_seed_rule = false

[[rules]]
name = "variable_inline_cleanup"
is_seed_rule = false
