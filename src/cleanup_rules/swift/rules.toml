# Copyright (c) 2022 Uber Technologies, Inc.
# 
# <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy of the License at
# <p>http://www.apache.org/licenses/LICENSE-2.0
# 
# <p>Unless required by applicable law or agreed to in writing, software distributed under the
# License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing permissions and
# limitations under the License.

#
# Before 
#   true && abcd()
# After 
#   abcd()
#
[[rules]]
name = "true_and_something"
query = """(
(conjunction_expression
        lhs: [(boolean_literal) @true  
            (tuple_expression 
                value: (boolean_literal) @true)]
        rhs: (_) @rhs
    ) @conjunction_expression
(#eq? @true "true")
)"""
groups = ["boolean_expression_simplify"]
replace_node = "conjunction_expression"
replace = "@rhs"

#
# Before 
#   abcd() && true
# After 
#   abcd()
#
[[rules]]
name = "something_and_true"
query = """(
(conjunction_expression
        lhs: (_) @lhs
        rhs: [(boolean_literal) @true  
            (tuple_expression 
                value: (boolean_literal) @true)]
    ) @conjunction_expression
(#eq? @true "true")
)"""
groups = ["boolean_expression_simplify"]
replace_node = "conjunction_expression"
replace = "@lhs"

# Dummy rule that acts as a junction for all boolean based cleanups
# Let's say you want to define rules from A -> B, A -> C, D -> B, D -> C, ... 
# A pattern here is - if there is an outgoing edge to B there is another to C.
# In these cases, you can use a dummy rule X as shown below:
# X -> B, X - C, A -> X, D -> X, ...
[[rules]]
name = "boolean_literal_cleanup"
