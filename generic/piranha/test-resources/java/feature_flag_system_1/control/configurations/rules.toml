# Copyright (c) 2022 Uber Technologies, Inc.
# 
# <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy of the License at
# <p>http://www.apache.org/licenses/LICENSE-2.0
# 
# <p>Unless required by applicable law or agreed to in writing, software distributed under the
# License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing permissions and
# limitations under the License.

# This file contains rules to the specific feature flag API.

#
# For @stale_flag_name = STALE_FLAG and @treated = true
# Before 
#  exp.isToggleEnabled(Experiment.STALE_FLAG)
# After 
#  true
#
[[rules]]
name = "replace_isToggleEnabled_with_boolean_literal"
query = """((
    (method_invocation 
        name : (_) @name
        arguments: ((argument_list 
                        ([
                          (field_access field: (_)@argument)
                          (_) @argument
                         ])) )
            
    ) @method_invocation
)
(#eq? @name "isToggleEnabled")
(#eq? @argument "@stale_flag_name")
)"""
replace_node = "method_invocation"
replace = "@treated"
groups = [ "replace_expression_with_boolean_literal"]
holes = ["treated", "stale_flag_name"]

#
# For @stale_flag_name = STALE_FLAG and @treated = true
# Before :
#  exp.isFlagTreated(STALE_FLAG)
# After :
#  true
#
[[rules]]
name = "replace_isFlagEnabled_with_boolean_literal"
query = """((
    (method_invocation 
        name : (_) @name
        arguments: ((argument_list 
                        ([
                          (field_access field: (_)@argument)
                          (_) @argument
                         ])) )
            
    ) @method_invocation
)
(#eq? @name "isFlagTreated")
(#eq? @argument "@stale_flag_name")
)"""
replace_node = "method_invocation"
replace = "@treated"
groups = [ "replace_expression_with_boolean_literal"]
holes = ["treated", "stale_flag_name"]

#
# For @stale_flag_name = STALE_FLAG and @treated = true
# Before :
#  exp.isToggleDisabled(STALE_FLAG)
# After :
#  false
#
[[rules]]
name = "replace_isToggleDisabled_with_boolean_literal"
query = """((
    (method_invocation 
        name : (_) @name
        arguments: ((argument_list 
                        ([
                          (field_access field: (_)@argument)
                          (_) @argument
                         ])) )
            
    ) @method_invocation
)
(#eq? @name "isToggleDisabled")
(#eq? @argument "@stale_flag_name")
)"""
replace_node = "method_invocation"
replace = "@treated_complement"
groups = [ "replace_expression_with_boolean_literal"]
holes = ["treated_complement", "stale_flag_name"]

#
# For @stale_flag_name = STALE_FLAG 
# Before :
#  enum Flags {
#   ABC, STALE_FLAG, OTHER_FLAG    
#  }
# After :
#  enum Flags {
#   ABC, OTHER_FLAG    
#  }
#
[[rules]]
name = "delete_enum_constant"
query = """
    (
    ((enum_constant name : (_) @n) @ec)       
    (#eq? @n  "@stale_flag_name")
    )
    """
replace_node = "ec"
replace = ""
holes = ["stale_flag_name"]
groups = [ "delete_enum_entry"]

#
# For @stale_flag_name = STALE_FLAG and @treated = true
# Before :
#   exp.putToggleEnabled(STALE_FLAG);
# After :
#   
#
[[rules]]
name = "delete_putToggleEnabled"
query = """
(
(expression_statement (method_invocation name : (_) @name
                    arguments: (argument_list
                                ([
                                  (field_access field: (_)@argument)
                                  (_) @argument
                                 ])))) @expression_statement
 (#eq? @name "putToggleEnabled")
 (#eq? @argument "@stale_flag_name")
)
"""
replace_node = "expression_statement"
replace = ""
holes = ["stale_flag_name"]

#
# For @stale_flag_name = STALE_FLAG and @treated = true
# Before :
#   exp.putToggleDisabled(STALE_FLAG);
# After :
#   
#
[[rules]]
name = "delete_putToggleDisabled"
query = """
(
(expression_statement (method_invocation name : (_) @name
                    arguments: (argument_list
                                ([
                                  (field_access field: (_)@argument)
                                  (_) @argument
                                 ])))) @expression_statement
 (#eq? @name "putToggleDisabled")
 (#eq? @argument "@stale_flag_name")
)
"""
replace_node = "expression_statement"
replace = ""

holes = ["stale_flag_name"]

#
# For @stale_flag_name = STALE_FLAG and @treated = true
# Before :
#   exp.includeEvent(STALE_FLAG);
# After :
#   
#
[[rules]]
name = "delete_includeEvent"
query = """
(
(expression_statement (method_invocation name : (_) @name
                    arguments: (argument_list
                                ([
                                  (field_access field: (_)@argument)
                                  (_) @argument
                                 ])))) @expression_statement
 (#eq? @name "includeEvent")
 (#eq? @argument "@stale_flag_name")
)
"""
replace_node = "expression_statement"
replace = ""
holes = ["stale_flag_name"]