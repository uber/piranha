# Copyright (c) 2022 Uber Technologies, Inc.
# 
# <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy of the License at
# <p>http://www.apache.org/licenses/LICENSE-2.0
# 
# <p>Unless required by applicable law or agreed to in writing, software distributed under the
# License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing permissions and
# limitations under the License.

# This file contains rules to the specific feature flag API.

#
# For @stale_flag_name = STALE_FLAG and @treated = true
# Before 
#  exp.isToggleEnabled(Experiment.STALE_FLAG)
# After 
#  true
#
[[rules]]
name = "replace_isToggleEnabled_with_boolean_literal"
query = """(
(call_expression 
		(navigation_expression (_) (navigation_suffix (simple_identifier) @m_name) )
		(call_suffix (value_arguments 
                      (value_argument [(navigation_expression (_) (navigation_suffix (simple_identifier) @flag_name)) 
                                       (simple_identifier) @flag_name
                                      ])))) @call_expression
  (#eq? @m_name "isToggleEnabled")
  (#eq? @flag_name "@stale_flag_name")
)"""
replace_node = "call_expression"
replace = "@treated"
groups = [ "replace_expression_with_boolean_literal"]
holes = ["treated", "stale_flag_name"]



[[rules]]
name = "replace_isToggleDisabled_with_boolean_literal"
query = """(
(call_expression 
		(navigation_expression (_) (navigation_suffix (simple_identifier) @m_name) )
		(call_suffix (value_arguments 
                      (value_argument [(navigation_expression (_) (navigation_suffix (simple_identifier) @flag_name)) 
                                       (simple_identifier) @flag_name
                                      ])))) @call_expression
  (#eq? @m_name "isToggleDisabled")
  (#eq? @flag_name "@stale_flag_name")
)"""
replace_node = "call_expression"
replace = "@treated_complement"
groups = [ "replace_expression_with_boolean_literal"]
holes = ["treated_complement", "stale_flag_name"]



#
# For @stale_flag_name = STALE_FLAG 
# Before :
#  enum Flags {
#   ABC, STALE_FLAG, OTHER_FLAG    
#  }
# After :
#  enum Flags {
#   ABC, OTHER_FLAG    
#  }
#
[[rules]]
name = "delete_enum_constant"
query = """
   (
(class_declaration (_) @name 
	(enum_class_body (enum_entry (simple_identifier) @enum_name) @enum_entry))
  (#eq? @enum_name "@stale_flag_name")
)
    """
replace_node = "enum_entry"
replace = ""
holes = ["stale_flag_name"]
groups = [ "delete_enum_entry"]
